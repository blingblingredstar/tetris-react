{"version":3,"sources":["images/bg.png","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","gameHelper.js","components/styles/StyledTetris.js","hooks/useStage.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","React","memo","StyledStage","height","width","Stage","stage","map","row","cell","x","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","position","StyledTetrisWrapper","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","direction","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","previous","_player","JSON","parse","stringify","offset","usePlayer","updatePlayerPosition","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6ccf5a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from 'styled-components'\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${(props) => props.color}, 0.8);\n  border: ${(props) => (props.type === 0 ? '0px solid ' : '4px solid')};\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\n  border-right-color: rgba(${(props) => props.color}, 1);\n  border-top-color: rgba(${(props) => props.color}, 1);\n  border-left-color: rgba(${(props) => props.color}, 0.3);\n`\n","export const TETROMINOS = {\n  0: {\n    shape: [[0]],\n    color: '0, 0, 0',\n  },\n  I: {\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [['O', 'O'], ['O', 'O']],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]],\n    color: '48, 211, 56',\n  },\n  T: {\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\n    color: '132, 61, 198',\n  },\n  Z: {\n    shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]],\n    color: '227, 78, 78',\n  },\n}\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ'\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)]\n\n  return TETROMINOS[randTetromino]\n}\n","import React from 'react'\nimport { StyledCell } from './styles/StyledCell'\nimport { TETROMINOS } from '../tetrominos'\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n)\nexport default React.memo(Cell)\n","import styled from 'styled-components'\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${(props) => props.height},\n    calc(25vw / ${(props) => props.width})\n  );\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`\n","import React from 'react'\n\nimport Cell from './Cell'\n\nimport { StyledStage } from './styles/StyledStage'\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n)\n\nexport default Stage\n","import styled from 'styled-components'\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${(props) => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`\n","import React from 'react'\n\nimport { StyledDisplay } from './styles/StyledDisplay'\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display\n","import styled from 'styled-components'\n\nexport const StyledStartButton = styled.div`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: #fff;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`\n","import React from 'react'\n\nimport { StyledStartButton } from './styles/StyledStartButton'\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton\n","export const STAGE_WIDTH = 12\nexport const STAGE_HEIGHT = 20\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\n  )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y++) {\n    for (let x = 0; x < player.tetromino[y].length; x++) {\n      // 1. check that we are on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. check that our move is inside the game areas height (y)\n          // We shouldn't go through the bottom of the play area\n          !stage[y + player.position.y + moveY] ||\n          // 3. check that our move is inside the game areas width (x)\n          !stage[y + player.position.y + moveY][\n            x + player.position.x + moveX\n          ] ||\n          // 4. Check that the cell we're moving to isn't set to clear\n          stage[y + player.position.y + moveY][\n            x + player.position.x + moveX\n          ][1] !== 'clear'\n        ) {\n          return true\n        }\n      }\n    }\n  }\n}\n","import styled from 'styled-components'\n\nimport bgImage from '../../images/bg.png'\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`\n","import { useState, useEffect } from 'react'\n\nimport { createStage } from '../gameHelper'\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage())\n  const [rowsCleared, setRowsCleared] = useState(0)\n\n  useEffect(() => {\n    setRowsCleared(0)\n\n    const sweepRows = (newStage) =>\n      newStage.reduce((acc, row) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1)\n          acc.unshift(new Array(newStage[0].length).fill([0, 'clear']))\n          return acc\n        }\n        acc.push(row)\n        return acc\n      }, [])\n\n    const updateStage = (prevStage) => {\n      // first flush the stage\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      )\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.position.y][x + player.position.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ]\n          }\n        })\n      })\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer()\n        return sweepRows(newStage)\n      }\n      return newStage\n    }\n\n    setStage((prev) => updateStage(prev))\n  }, [player, resetPlayer])\n\n  return [stage, setStage, rowsCleared]\n}\n","import React, { useState } from 'react'\n\nimport Stage from './Stage'\nimport Display from './Display'\nimport StartButton from './StartButton'\n\nimport { createStage, checkCollision } from '../gameHelper'\n\n// styled components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\n\n// custom hooks\nimport { useInterval } from '../hooks/useInterval'\nimport { usePlayer } from '../hooks/usePlayer'\nimport { useStage } from '../hooks/useStage'\nimport { useGameStatus } from '../hooks/useGameStatus'\n\n// components\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null)\n  const [gameOver, setGameOver] = useState(false)\n\n  const [player, updatePlayerPosition, resetPlayer, playerRotate] = usePlayer()\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared,\n  )\n\n  const movePlayer = (direction) => {\n    if (!checkCollision(player, stage, { x: direction, y: 0 })) {\n      updatePlayerPosition({ x: direction, y: 0 })\n    }\n  }\n  const startGame = () => {\n    // reset everything\n    setStage(createStage())\n    setDropTime(1000)\n    resetPlayer()\n    setGameOver(false)\n    setScore(0)\n    setRows(0)\n    setLevel(0)\n  }\n  const drop = () => {\n    // Increase level when player has cleaned 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1)\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200)\n    }\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPosition({ x: 0, y: 1, collided: false })\n    } else {\n      // Game over\n      if (player.position.y < 1) {\n        console.log('Game over!!!')\n        setGameOver(true)\n        setDropTime(null)\n      }\n      updatePlayerPosition({ x: 0, y: 0, collided: true })\n    }\n  }\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1) + 200)\n      }\n    }\n  }\n\n  const dropPlayer = () => {\n    setDropTime(null)\n    drop()\n  }\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1) // move left\n      } else if (keyCode === 39) {\n        movePlayer(1) // move right\n      } else if (keyCode === 40) {\n        dropPlayer()\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1)\n      }\n    }\n  }\n\n  useInterval(() => {\n    drop()\n  }, dropTime)\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  )\n}\n\nexport default Tetris\n","import { useState, useCallback } from 'react'\n\nimport { randomTetromino, TETROMINOS } from '../tetrominos'\nimport { STAGE_WIDTH, checkCollision } from '../gameHelper'\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    position: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  })\n\n  const rotate = (matrix, direction) => {\n    // Make rows become cols\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map((col) => col[index]),\n    )\n    // Reverse each row to get rotated matrix\n    if (direction > 0) {\n      return rotatedTetro.map((row) => row.reverse())\n    } else {\n      return rotatedTetro.reverse()\n    }\n  }\n\n  const playerRotate = (stage, direction) => {\n    const _player = JSON.parse(JSON.stringify(player))\n    _player.tetromino = rotate(_player.tetromino, direction)\n\n    const position = _player.position.x\n    let offset = 1\n\n    while (checkCollision(_player, stage, { x: 0, y: 0 })) {\n      _player.position.x += offset\n      offset = -(offset + (offset > 0 ? 1 : 0))\n      if (offset > _player.tetromino[0].length) {\n        rotate(_player.tetromino, -direction)\n        _player.position.x = position\n        return\n      }\n    }\n\n    setPlayer(_player)\n  }\n\n  const updatePlayerPosition = ({ x, y, collided }) => {\n    setPlayer((previous) => ({\n      ...previous,\n      position: {\n        x: (previous.position.x += x),\n        y: (previous.position.y += y),\n      },\n      collided,\n    }))\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      position: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0,\n      },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n  return [player, updatePlayerPosition, resetPlayer, playerRotate]\n}\n","import { useState, useEffect, useCallback } from 'react'\n\nexport const useGameStatus = (rowsCleared) => {\n  const [score, setScore] = useState(0)\n  const [rows, setRows] = useState(0)\n  const [level, setLevel] = useState(0)\n\n  const linePoints = [40, 100, 300, 1200]\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1))\n      setRows((prev) => prev + rowsCleared)\n    }\n  }, [level, linePoints, rowsCleared])\n\n  useEffect(() => {\n    calcScore()\n  }, [calcScore, rowsCleared, score])\n\n  return [score, setScore, rows, setRows, level, setLevel]\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef()\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => {\n        clearInterval(id)\n      }\n    }\n  }, [delay])\n}\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n  <div className=\"app\">\n    <Tetris />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}